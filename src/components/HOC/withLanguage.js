import { useContext } from 'react';
import { LanguageContext } from '../../context/LanguageProvider';

export const withLanguage = (WrappedComponent) => {
  return (props) => {
    const { language } = useContext(LanguageContext);

    const texts = {
      en: {
        hi: 'Hi',
        sortMemes: 'Sort memes',
        browse: 'Browsing memes',
        generateMeme: 'Generate meme',
        selectImage: 'Select image',
        download: 'Download',
        upload: 'Upload',
        removeText: 'Remove text',
        colorText: 'Black text',
        addTextTop: 'Add text on top meme',
        addTextBot: 'Add text on bottom meme',
        changeFontSize: 'change your font size, current',
        errorTextLengthTop: 'Text is too long for the image, change font size on top text',
        errorTextLengthBot: 'Text is too long for the image, change font size on bottom text',
        errorSavingImage: 'Error saving the image',
        succesSavingImage: 'Image saved successfully',
        email: 'Email address',
        password: 'Password',
        confirmPassword: 'Confirm password',
        register: 'Register',
        back: 'Back to login form',
        logIn: 'Log in',
        remindPassword: 'Remind password',
        sendPassword: 'Send password reset link',
        forgetPassword: 'Forget password?',
        missing: "We've lost you, go back to the",
        mainPage: 'Main page',
        or: 'or',
        category: 'Category',
        type: 'Type',
        sort: 'Sort',
        unauthorized: 'you shall not pass!!',
        sfw: 'SFW',
        nsfw: 'NSFW',
        cropped: 'Cropped',
        unCropped: 'Uncropped',
        meme: 'Meme',
        notMeme: 'Not Meme',
        notificationToastWarn: 'Oops we have a problem, no meme available, please contact support',
        notificationToastSuccesLike: 'You like it',
        notificationToastSuccesDisLike: "You don't like it",
        notificationToastSuccesSortMeme: 'Meme has been sorted!',
        notificationToastErrorSortMeme: 'Meme was not sorted, please contact support',
        addComment: 'Add comment',
        comments: 'Comments',
        errorMessageComment: 'Comment cannot be empty!',
        userMessageComment: 'You must be logged in to add a comment',
        projectDocumentation: 'Project Documentation',
        features: 'Features',
        projectDocs: {
          introduction: `This project was created using Create React App (CRA) and is designed as a single-page application (SPA). The purpose of the application is to provide a platform for browsing memes with various features, such as sorting options and meme generation. The backend of the application was developed by an experienced programmer using PHP and the PostgreSQL database.`,
          accessAndAuthorization: `Due to the requirement of an endpoint token for authorization, the application currently requires users to log in even on the base page. This means that users must log in before accessing any data or features on the platform. This is a temporary restriction and future improvements are planned to enhance the application's security features.`,
          features: `Infinity Scroll: Users can browse an infinite number of memes on the platform.`,
          SortingOptions: ` Users can sort memes based on different criteria like category, type and well trimmed is it a meme etc.`,
          MemeGeneration: ` Users can generate their memes by uploading images.`,
          HOC: `The application implements Higher-Order Components (HOC) and context to manage the state of the application.`,
          Styling: `The styling of the application was done using Tailwind CSS.,`,
          backendDevelopment: `The backend of the application was developed by using PHP and the PostgreSQL database. The developer thoroughly tested the entire development process and merged the code into the develop branch.`,
          revenueModel: `This project is planned to be a future product that will generate revenue from advertisements and paid subscriptions.`,
          info: 'The memes displayed from the database are not intended to offend anyone and are solely for humorous purposes, as well as to showcase certain programming techniques in the portfolio'
        }
      },
      pl: {
        hi: 'Cześć',
        sortMemes: 'Sortuj memy',
        browse: 'Przeglądaj memy',
        generateMeme: 'Generuj mema',
        selectImage: 'Wybierz zdjęcie',
        download: 'Pobierz',
        upload: 'Prześlij',
        removeText: 'Usuń tekst',
        colorText: 'Czarny tekst',
        addTextTop: 'Dodaj tekst na górze mema',
        addTextBot: 'Dodaj tekst na dole mema',
        changeFontSize: 'zmień rozmiar czcionki, aktualny',
        errorTextLengthTop: 'Tekst jest za długi w stosunku do obrazu, zmień rozmiar czcionki w górnym tekście',
        errorTextLengthBot: 'Tekst jest za długi w stosunku do obrazu, zmień rozmiar czcionki w dolnym tekście',
        errorSavingImage: 'Mem nie został zapisany',
        succesSavingImage: 'Mem został zapisany!',
        email: 'Adres email',
        password: 'Hasło',
        confirmPassword: 'Potwierdź hasło',
        register: 'Zajerestruj',
        back: 'Cofnij do logowania',
        logIn: 'Zaloguj',
        remindPassword: 'Przypomnij hasło',
        sendPassword: 'Wyślij link do resetowania hasła',
        forgetPassword: 'Zapomniałeś hasła?',
        missing: 'Straciliśmy cię, wróć do',
        mainPage: 'Głównej strony',
        or: 'Albo',
        category: 'Kategoria',
        type: 'Typ',
        sort: 'Sortuj',
        unauthorized: 'nie przejdziesz!',
        sfw: 'Bezpieczny',
        nsfw: 'Niebezpieczny',
        cropped: 'Przycięty',
        unCropped: 'Nieprzycięty',
        meme: 'Mem',
        notMeme: 'to nie Mem',
        notificationToastWarn: 'Ups, mamy problem, mem nie jest dostępny, skontaktuj się z pomocą techniczną',
        notificationToastSuccesLike: 'Polubiłeś mema',
        notificationToastSuccesDisLike: 'Nie lubisz tego mema',
        notificationToastSuccesSortMeme: 'Mem został posortowany!',
        notificationToastErrorSortMeme: 'Mem nie został posortowany, skontaktuj się z pomocą techniczną',
        addComment: 'Dodaj komentarz',
        comments: 'Komenatrze',
        errorMessageComment: 'Komentarz nie może być pusty!',
        userMessageComment: 'Musisz być zalogowany, żeby dodać komentarz',
        projectDocumentation: 'Dokumentacja projektu',
        features: 'Cechy',
        projectDocs: {
          introduction: ` Ten projekt został stworzony za pomocą Create React App (CRA) i jest zaprojektowany jako aplikacja jednej strony (SPA). Celem aplikacji jest dostarczenie platformy do przeglądania memów z różnymi funkcjami, takimi jak opcje sortowania i generowanie memów. Backend aplikacji został opracowany przez doświadczonego programistę za pomocą PHP i bazy danych PostgreSQL.`,
          accessAndAuthorization: ` Ze względu na wymóg tokenu końcowego dla autoryzacji, aplikacja obecnie wymaga od użytkowników logowania nawet na stronie podstawowej. Oznacza to, że użytkownicy muszą się zalogować przed uzyskaniem dostępu do jakichkolwiek danych lub funkcji na platformie. Jest to tymczasowe ograniczenie, a w przyszłości planowane są ulepszenia, aby wzmocnić funkcje bezpieczeństwa aplikacji.`,
          features: ` Nieskończona przeglądarka: Użytkownicy mogą przeglądać nieskończoną liczbę memów na platformie.`,
          SortingOptions: `Użytkownicy mogą sortować memy na podstawie różnych kryteriów, takich jak kategoria, typ i dobrze przycięte, czy jest to mem itp.`,
          MemeGeneration: ` Użytkownicy mogą generować swoje memy poprzez przesyłanie obrazów.`,
          HOC: ` Aplikacja implementuje Higher-Order Components (HOC) i kontekst do zarządzania stanem aplikacji.`,
          Styling: ` Stylowanie aplikacji zostało wykonane za pomocą Tailwind CSS.`,
          backendDevelopment: ` Backend aplikacji został opracowany za pomocą PHP i bazy danych PostgreSQL. Programista dokładnie przetestował cały proces tworzenia i połączył kod z gałęzią develop.`,
          revenueModel: `Ten projekt jest planowany jako przyszły produkt, który będzie generować przychody z reklam i płatnych subskrypcji.`,
          info: 'Memy wyświetlane z bazy danych nie mają na celu obrażania nikogo i służą wyłącznie do celów humorystycznych, a także do pokazania określonych technik programistycznych w portfolio'
        }
      }
    };

    return (
      <div>
        <WrappedComponent {...props} language={language} texts={texts[language]} />
      </div>
    );
  };
};
